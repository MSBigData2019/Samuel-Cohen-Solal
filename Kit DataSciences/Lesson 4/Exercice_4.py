{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import json\n",
    "import pandas as pd\n",
    "import re\n",
    "import pyjq\n",
    "from multiprocessing import Pool\n",
    "import time\n",
    "\n",
    "request_headers = {\n",
    "    \"Accept-Language\": \"en-US,en;q=0.5\",\n",
    "    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0\",\n",
    "    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n",
    "    \"Referer\": \"http://thewebsite.com\",\n",
    "    \"Connection\": \"keep-alive\"\n",
    "}\n",
    "\n",
    "def _handle_request_result_and_build_soup(request_result):\n",
    "    if request_result.status_code == 200:\n",
    "        soup = BeautifulSoup(request_result.content,\"html.parser\")\n",
    "    return soup\n",
    "\n",
    "def get_add_links_for_regions(regions, prefix):\n",
    "    for regionID in regions:\n",
    "        p = 1\n",
    "        while True:\n",
    "            url = prefix + f\"/listing?makesModelsCommercialNames=RENAULT%3AZOE&options=&page={p}&regions={regionID}\"\n",
    "            page = requests.get(url)\n",
    "            soup = _handle_request_result_and_build_soup(page)\n",
    "            elems = soup.select(\"a[class^=link]\")\n",
    "            if len(elems) != 0:\n",
    "                print(p)\n",
    "                for elem in elems:\n",
    "                    link = elem.attrs['href']\n",
    "                    links.append(prefix + link)\n",
    "                    region_IDs.append(regionID)\n",
    "            else:\n",
    "                break\n",
    "            p += 1\n",
    "    return pd.DataFrame({\"Link\": links,\n",
    "                         \"region\": region_IDs})\n",
    "\n",
    "def get_url_argus(url):\n",
    "    page = requests.get(url, headers = request_headers)\n",
    "    soup = _handle_request_result_and_build_soup(page)\n",
    "    i=0\n",
    "    while True:\n",
    "        tmp = soup.findAll(\"a\", class_=\"btnGrey clearPhone txtLPhone\")[i].attrs['href']\n",
    "        if \"fiche_cote\" in tmp:\n",
    "            url_argus = prefix + tmp\n",
    "            break\n",
    "        else:\n",
    "            i +=1\n",
    "    return url_argus\n",
    "\n",
    "def get_rating_argus(url, reg_num):\n",
    "    try:\n",
    "        page_argus = requests.get(get_url_argus(url), headers = request_headers)\n",
    "        soup_argus = _handle_request_result_and_build_soup(page_argus)\n",
    "        argus_rating = ''.join(reg_num.findall(soup_argus.find(\"span\", class_=\"jsRefinedQuotBrute\").text))\n",
    "        return argus_rating\n",
    "    except AttributeError:\n",
    "        return 0\n",
    "\n",
    "def get_dataframe_zoe(url):\n",
    "    global df_links\n",
    "\n",
    "    df = pd.DataFrame({'Region':[],\n",
    "                       'Version': [],\n",
    "                       'Year': [],\n",
    "                       'Mileage': [],\n",
    "                       'Owner\\'s phone': [],\n",
    "                       'Price': [],\n",
    "                       'Argus rating': [],\n",
    "                       'Benefit Buyer': []})\n",
    "\n",
    "\n",
    "    try:\n",
    "        page = requests.get(url, headers = request_headers)\n",
    "        soup = _handle_request_result_and_build_soup(page)\n",
    "        reg_json = re.compile(r\"xtMultC:(.*),\")\n",
    "        reg_num = re.compile(r\"(\\d+)\")\n",
    "        reg_phone = re.compile(r\"[0-9 ]{2,}\")\n",
    "\n",
    "        json_tab = json.loads(str(reg_json.findall(page.text))[3:-2])\n",
    "\n",
    "        version = str(pyjq.one(\".\\\"16\\\"\",json_tab))[1:-1]\n",
    "        mileage = str(pyjq.one(\".\\\"33\\\"\",json_tab))[1:-1]\n",
    "        mileage = str(reg_num.findall(mileage))[2:-2]\n",
    "        year = str(pyjq.one(\".\\\"36\\\"\",json_tab))[1:-1]\n",
    "        year = str(reg_num.findall(year))[2:-2]\n",
    "        price = str(pyjq.one(\".\\\"32\\\"\",json_tab))[1:-1]\n",
    "        price = int(str(reg_num.findall(price))[2:-2])\n",
    "        phone = soup.find(\"div\", class_=\"phoneNumber1\").text\n",
    "        phone = ''.join(reg_phone.findall(phone)).strip('  ')\n",
    "\n",
    "\n",
    "        rating_argus = int(get_rating_argus(url, reg_num))\n",
    "\n",
    "        if rating_argus > 0:\n",
    "            diff_price = rating_argus - price\n",
    "        else:\n",
    "            diff_price = 0\n",
    "\n",
    "        df = df.append({'Region': df_links.set_index(\"Link\")['region'].loc[(url)],\n",
    "                        'Version': version,\n",
    "                        'Year': year,\n",
    "                        'Mileage': mileage,\n",
    "                        'Owner\\'s phone': phone,\n",
    "                        'Price': price,\n",
    "                        'Argus rating': rating_argus,\n",
    "                        'Benefit Buyer': diff_price}, ignore_index=True)\n",
    "    except UnboundLocalError:\n",
    "        pass\n",
    "    return df\n",
    "\n",
    "\n",
    "prefix = \"https://www.lacentrale.fr\"\n",
    "regions = [\"FR-IDF\", \"FR-PAC\", \"FR-NAQ\"]\n",
    "links = []\n",
    "region_IDs = []\n",
    "\n",
    "# df_links = get_add_links_for_regions(regions, prefix)\n",
    "# df_links.to_pickle(\"Links_regions\")\n",
    "df_links = pd.read_pickle(\"Links_regions\")\n",
    "\n",
    "urls = df_links['Link'][:]\n",
    "\n",
    "\n",
    "start = time.time()\n",
    "\n",
    "i = 0\n",
    "\n",
    "p = Pool(5)\n",
    "df = pd.concat(p.map(get_dataframe_zoe, urls), ignore_index=True)\n",
    "df = df.sort_values(by=['Benefit Buyer'], ascending=False)\n",
    "\n",
    "end = time.time()\n",
    "\n",
    "\n",
    "print(\"Execution time \" + str(end-start) + \"s\")\n",
    "\n",
    "df.to_csv(\"Dataframe_zoe.csv\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
